package com.example.myapplication.ui.page.schedule

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.DropdownMenuItem
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ColorLens
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.myapplication.ui.BottomNavigation
import com.example.myapplication.ui.backendset.data.ScheduleData
import com.example.myapplication.ui.backendset.data.SharedArrivalPoi
import com.example.myapplication.ui.backendset.data.SharedDepartPoi
import com.example.myapplication.ui.backendset.data.SharedScheduleList
import java.time.LocalDate
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter


@Composable
fun DayScheduleScreen(
    selectedDate: LocalDate,
    navController: NavController,
    viewModel: DayScheduleViewModel = viewModel()
) {
    val scheduleList = SharedScheduleList.getSchedules()
    scheduleList.forEach {
        Log.d("test",it.startTime)
    }
    // 予定を開始時間でソート
    val sortedScheduleList = scheduleList.sortedBy {
        ZonedDateTime.parse(it.startTime, DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ"))
    }.filter {
        ZonedDateTime.parse(it.startTime, DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ")).toLocalDate() == selectedDate
    }
    sortedScheduleList.forEach {
        Log.d("test",it.startTime)
    }
    Log.d("test","ac")

    Box(modifier = Modifier.fillMaxSize().background(Color.Black)) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(bottom = 72.dp)
        ) {
            // 日付表示
            Text(
                text = "일정: ${selectedDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))}",
                color = Color.White,
                style = MaterialTheme.typography.headlineSmall,
                modifier = Modifier.padding(16.dp)
            )
            // 予定リストの表示
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 16.dp)
            ) {
                var previousScheduleTime: ZonedDateTime? = null

                items(sortedScheduleList) { schedule ->
                    // 予定の開始時間を取得
                    val scheduleStartTime = ZonedDateTime.parse(schedule.startTime, DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ"))

                    // 時間帯が異なる場合に空のリストを挿入
                    if (previousScheduleTime != null && !scheduleStartTime.isEqual(previousScheduleTime)) {
                        // 空のScheduleItemViewを挿入して繋げる
                        Spacer(modifier = Modifier.height(16.dp)) // 空間を作る
                    }

                    // TravelTimeInfoの表示
                    TravelTimeInfo(schedule = schedule)

                    // 実際の予定アイテム
                    ScheduleItemView(
                        schedule = schedule,
                        onDeleteSchedule = { scheduleId ->
                            viewModel.deleteSchedule(scheduleId)
                        },
                        navController = navController
                    )

                    // 前回の予定時間を保存
                    previousScheduleTime = scheduleStartTime
                }
            }
        }

        // Bottom Navigation
        BottomNavigation(
            onHomeClick = { navController.navigate("calendar") },
            onInputFormClick = { navController.navigate("inputForm") },
        )
    }
}

@Composable
fun TravelTimeInfo(schedule: ScheduleData) {
    // ScheduleDataからexpectedTravelTimeを取得
    val expectedTravelTime = schedule.expectedTravelTime

    // 秒単位のexpectedTravelTimeを時間と分に変換
    val hours = (expectedTravelTime / 3600).toInt()
    val minutes = ((expectedTravelTime % 3600) / 60).toInt()

    // Boxで囲んで、スタイルを調整
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(start = 64.dp) // ScheduleItemViewに合わせて配置
            .background(Color.Gray.copy(alpha = 0.2f), shape = RoundedCornerShape(4.dp))
            .height(40.dp) // 高さの調整
            .padding(8.dp),
        contentAlignment = Alignment.CenterStart
    ) {
        Text(
            text = "Expected Travel Time: $hours hours $minutes minutes",
            color = Color.Black,
            style = MaterialTheme.typography.bodyMedium
        )
    }
}

@Composable
fun ScheduleItemView(
    schedule: ScheduleData,
    onDeleteSchedule: (Int) -> Unit,
    navController: NavController,
    viewModel: ScheduleItemViewModel = viewModel() // ViewModelを取得
) {
    val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ssZ")
    val startTime = ZonedDateTime.parse(schedule.startTime, formatter)
    val endTime = ZonedDateTime.parse(schedule.endTime, formatter)

    // ViewModelから背景色を取得
    val backgroundColor = viewModel.backgroundColor.value

    // 色変更メニューの表示状態
    var expanded by remember { mutableStateOf(false) }

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .background(backgroundColor, shape = RoundedCornerShape(4.dp))
            .height(100.dp)
            .clickable {
                SharedDepartPoi.x = schedule.startX
                SharedDepartPoi.y = schedule.startY
                SharedArrivalPoi.x = schedule.endX
                SharedArrivalPoi.y = schedule.endY
                navController.navigate("mapScreen")
            }
            .padding(8.dp),
        contentAlignment = Alignment.CenterStart
    ) {
        Column {
            // 予定名
            Text(
                text = schedule.name,
                style = MaterialTheme.typography.bodyLarge,
                color = Color.Black
            )
            // 予定時間
            Text(
                text = "${startTime.toLocalTime().format(DateTimeFormatter.ofPattern("HH:mm"))} ~ ${endTime.toLocalTime().format(DateTimeFormatter.ofPattern("HH:mm"))}",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.Black
            )
        }

        // ボタンの配置
        Row(
            modifier = Modifier.align(Alignment.TopEnd),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            // 色選択ボタン (アイコンボタン)
            Box {
                IconButton(onClick = { expanded = !expanded }) {
                    Icon(
                        imageVector = Icons.Default.ColorLens,
                        contentDescription = "Change Color",
                        tint = Color.White
                    )
                }

                // 色選択メニュー
                DropdownMenu(
                    expanded = expanded,
                    onDismissRequest = { expanded = false }
                ) {
                    DropdownMenuItem(onClick = { viewModel.changeBackgroundColor(Color.Red); expanded = false }) {
                        Text("Red")
                    }
                    DropdownMenuItem(onClick = { viewModel.changeBackgroundColor(Color.Green); expanded = false }) {
                        Text("Green")
                    }
                    DropdownMenuItem(onClick = { viewModel.changeBackgroundColor(Color.Blue); expanded = false }) {
                        Text("Blue")
                    }
                }
            }

            // 削除ボタン
            IconButton(onClick = { onDeleteSchedule(schedule.id) }) {
                Icon(
                    imageVector = Icons.Default.Delete,
                    contentDescription = "Delete Schedule",
                    tint = Color.Red
                )
            }
        }
    }
}